{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"CreateUserDto": {
				"properties": {
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"repeatPassword": {
						"type": "string"
					},
					"acceptTerms": {
						"type": "boolean"
					}
				},
				"required": [
					"email",
					"name",
					"username",
					"password",
					"repeatPassword",
					"acceptTerms"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TokenDto": {
				"properties": {
					"token": {
						"type": "string"
					}
				},
				"required": [
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LogInDto": {
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ForgotPasswordDto": {
				"properties": {
					"email": {
						"type": "string"
					}
				},
				"required": [
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResetPasswordDto": {
				"properties": {
					"token": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"repeatPassword": {
						"type": "string"
					}
				},
				"required": [
					"token",
					"password",
					"repeatPassword"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TwoFactorAuthenticationDto": {
				"properties": {
					"code": {
						"type": "string"
					}
				},
				"required": [
					"code"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"description": "JWT Authorization header using the Bearer scheme.\n\nEnter your token in the text input below.\n\n Example: \"12345abcdef\"\n\n Name: Authorization\n\nIn: header"
			}
		}
	},
	"info": {
		"title": "boilerplate-api-authorization",
		"version": "1.0.0",
		"description": "REST API to support Authorization micro service",
		"license": {
			"name": "ISC"
		},
		"contact": {
			"name": "Mirko Josimovic"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/auth/signup": {
			"post": {
				"operationId": "Signup",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Register a new user account and send a verification email.\nThe first account registered in the system is assigned the `ADMIN` role, other accounts are assigned the `GUEST` role.",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateUserDto"
							}
						}
					}
				}
			}
		},
		"/auth/verify": {
			"post": {
				"operationId": "VerifyEmail",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Verify a new account with a verification token received by email after registration",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TokenDto"
							}
						}
					}
				}
			}
		},
		"/auth/signin": {
			"post": {
				"operationId": "Signin",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"refreshToken": {},
										"jwtToken": {},
										"isTwoFactorAuthenticationEnabled": {
											"type": "boolean"
										},
										"auth": {
											"type": "boolean"
										}
									},
									"required": [
										"refreshToken",
										"jwtToken",
										"isTwoFactorAuthenticationEnabled",
										"auth"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Authenticate account credentials and return a JWT token and refresh token.\nAccounts must be verified before authenticating.",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LogInDto"
							}
						}
					}
				}
			}
		},
		"/auth/refresh-token": {
			"post": {
				"operationId": "RefreshToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"refreshToken": {},
										"jwt": {},
										"isTwoFactorAuthenticationEnabled": {
											"type": "boolean"
										},
										"auth": {
											"type": "boolean"
										}
									},
									"required": [
										"refreshToken",
										"jwt",
										"isTwoFactorAuthenticationEnabled",
										"auth"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Use a refresh token to generate a new JWT token and a new refresh token",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TokenDto"
							}
						}
					}
				}
			}
		},
		"/auth/revoke-token": {
			"post": {
				"operationId": "RevokeToken",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Revoke a refresh token.\nAdmin users can revoke the tokens of any account, regular users can only revoke their own tokens.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TokenDto"
							}
						}
					}
				}
			}
		},
		"/auth/forgot-password": {
			"post": {
				"operationId": "ForgotPassword",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Send a token to the email which will allow you to reset the password of the account",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ForgotPasswordDto"
							}
						}
					}
				}
			}
		},
		"/auth/reset-password": {
			"post": {
				"operationId": "ResetPassword",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Password reset token received in the email from the forgot password step",
				"tags": [
					"User"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ResetPasswordDto"
							}
						}
					}
				}
			}
		},
		"/auth/me": {
			"get": {
				"operationId": "CurrentUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {},
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Current user details",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/auth/2fa/generate": {
			"post": {
				"operationId": "GenerateTwoFactorAuthenticationCode",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Generate two factor authentication code",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/auth/2fa/turn-on": {
			"post": {
				"operationId": "TurnOnTwoFactorAuthentication",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "We can create an endpoint that turns on the Two-Factor Authentication.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TwoFactorAuthenticationDto"
							}
						}
					}
				}
			}
		},
		"/auth/2fa/authenticate": {
			"post": {
				"operationId": "SecondFactorAuthentication",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"refreshToken": {},
										"jwtToken": {},
										"isTwoFactorAuthenticationEnabled": {
											"type": "boolean"
										},
										"auth": {
											"type": "boolean"
										}
									},
									"required": [
										"refreshToken",
										"jwtToken",
										"isTwoFactorAuthenticationEnabled",
										"auth"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "The user sends a valid code to the endpoint and is given a new JWT and Refresh token with full access",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/TwoFactorAuthenticationDto"
							}
						}
					}
				}
			}
		},
		"/images/upload": {
			"post": {
				"operationId": "UploadFile",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Upload image, only jpeg, jpe and png. max file size 2MB",
				"tags": [
					"File"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"type": "object",
								"properties": {
									"file": {
										"type": "string",
										"format": "binary"
									}
								},
								"required": [
									"file"
								]
							}
						}
					}
				}
			}
		},
		"/images/all": {
			"get": {
				"operationId": "GetAllPhotos",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Return all photos",
				"tags": [
					"File"
				],
				"security": [],
				"parameters": []
			}
		},
		"/images/single/{filename}": {
			"get": {
				"operationId": "GetSingleFile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Image details",
				"tags": [
					"File"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "filename",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/images/image/{filename}": {
			"get": {
				"operationId": "GetActualFile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Get actual image",
				"tags": [
					"File"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "filename",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/images/delete/{id}": {
			"delete": {
				"operationId": "DeleteFile",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Delete file",
				"tags": [
					"File"
				],
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "/api/v1"
		}
	]
}